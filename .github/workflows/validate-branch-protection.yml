name: Validate Branch Protection

# This workflow validates that branch protection rules are properly configured
# It can be run manually to verify the configuration

on:
  workflow_dispatch:
    inputs:
      branch:
        description: 'Branch to validate protection rules for'
        required: false
        default: 'main'
        type: string

jobs:
  validate-protection:
    name: Validate Branch Protection Rules
    runs-on: ubuntu-latest
    permissions:
      contents: read
      
    steps:
      - name: üîç Starting Branch Protection Validation
        run: |
          echo "::notice title=Branch Protection Validation::Validating branch protection configuration"
          echo "üîç This workflow validates that required branch protection rules are configured"
          echo "üìä Status: STARTING"
          echo "üéØ Target branch: ${{ inputs.branch || 'main' }}"
      
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: üîß Validate Branch Protection Configuration
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          BRANCH_NAME: ${{ inputs.branch || 'main' }}
        run: |
          echo "::group::Branch Protection Validation"
          echo "::notice title=Validation Process::Checking branch protection rules via GitHub API"
          
          # Get branch protection information
          REPO="${{ github.repository }}"
          echo "üìã Repository: $REPO"
          echo "üåø Branch: $BRANCH_NAME"
          
          # Check if branch protection is enabled
          PROTECTION_DATA=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
            -H "Accept: application/vnd.github+json" \
            "https://api.github.com/repos/$REPO/branches/$BRANCH_NAME/protection" || echo "null")
          
          if [ "$PROTECTION_DATA" = "null" ] || echo "$PROTECTION_DATA" | grep -q "Branch not protected"; then
            echo "::error title=Protection Missing::Branch protection is not configured"
            echo "‚ùå Branch protection: NOT CONFIGURED"
            echo "üîß Action required: Configure branch protection rules"
            echo "üìã Use the configuration script: .github/scripts/configure-branch-protection.sh"
            exit 1
          fi
          
          echo "‚úÖ Branch protection: ENABLED"
          
          # Validate required status checks
          REQUIRED_CHECKS=$(echo "$PROTECTION_DATA" | jq -r '.required_status_checks.contexts[]?' 2>/dev/null || echo "")
          EXPECTED_CHECKS=("Code Quality (SwiftLint)" "Build Validation" "Unit Tests" "Integration Tests (QEMU)")
          
          echo "üîç Validating required status checks..."
          
          MISSING_CHECKS=()
          for check in "${EXPECTED_CHECKS[@]}"; do
            if echo "$REQUIRED_CHECKS" | grep -Fxq "$check"; then
              echo "  ‚úÖ $check: REQUIRED"
            else
              echo "  ‚ùå $check: MISSING"
              MISSING_CHECKS+=("$check")
            fi
          done
          
          if [ ${#MISSING_CHECKS[@]} -gt 0 ]; then
            echo "::error title=Missing Status Checks::Required status checks are not configured"
            echo "‚ùå Missing required status checks:"
            for check in "${MISSING_CHECKS[@]}"; do
              echo "   ‚Ä¢ $check"
            done
            exit 1
          fi
          
          # Validate other protection settings
          ENFORCE_ADMINS=$(echo "$PROTECTION_DATA" | jq -r '.enforce_admins.enabled' 2>/dev/null || echo "false")
          REQUIRE_REVIEWS=$(echo "$PROTECTION_DATA" | jq -r '.required_pull_request_reviews != null' 2>/dev/null || echo "false")
          STRICT_CHECKS=$(echo "$PROTECTION_DATA" | jq -r '.required_status_checks.strict' 2>/dev/null || echo "false")
          
          echo "üîç Validating protection settings..."
          
          if [ "$ENFORCE_ADMINS" = "true" ]; then
            echo "  ‚úÖ Administrator enforcement: ENABLED"
          else
            echo "  ‚ö†Ô∏è Administrator enforcement: DISABLED"
            echo "::warning title=Admin Enforcement::Administrator enforcement is not enabled"
          fi
          
          if [ "$REQUIRE_REVIEWS" = "true" ]; then
            echo "  ‚úÖ Pull request reviews: REQUIRED"
          else
            echo "  ‚ö†Ô∏è Pull request reviews: NOT REQUIRED"
            echo "::warning title=Review Requirement::Pull request reviews are not required"
          fi
          
          if [ "$STRICT_CHECKS" = "true" ]; then
            echo "  ‚úÖ Up-to-date branches: REQUIRED"
          else
            echo "  ‚ö†Ô∏è Up-to-date branches: NOT REQUIRED"
            echo "::warning title=Branch Updates::Branches are not required to be up-to-date"
          fi
          
          echo "::endgroup::"
      
      - name: üìä Branch Protection Validation Summary
        if: always()
        run: |
          echo "::group::Branch Protection Validation Summary"
          if [ ${{ job.status }} == 'success' ]; then
            echo "::notice title=Validation Complete::Branch protection validation completed successfully"
            echo "‚úÖ Branch protection rules: PROPERLY CONFIGURED"
            echo "‚úÖ Required status checks: ALL PRESENT"
            echo "üéØ Branch protection settings validated:"
            echo "   ‚Ä¢ Code Quality (SwiftLint) - Required"
            echo "   ‚Ä¢ Build Validation - Required"
            echo "   ‚Ä¢ Unit Tests - Required"
            echo "   ‚Ä¢ Integration Tests (QEMU) - Required"
            echo "üìã Branch is properly protected against broken code"
          else
            echo "::error title=Validation Failed::Branch protection validation failed"
            echo "‚ùå Branch protection rules: INCOMPLETE OR MISSING"
            echo "üîß Action required: Configure missing branch protection rules"
            echo "üìã Configuration options:"
            echo "   ‚Ä¢ Manual: GitHub Settings ‚Üí Branches ‚Üí Add rule"
            echo "   ‚Ä¢ Automated: Run .github/scripts/configure-branch-protection.sh"
            echo "   ‚Ä¢ Documentation: See .github/branch-protection-config.md"
          fi
          echo "::endgroup::"
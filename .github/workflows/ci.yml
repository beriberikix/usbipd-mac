name: CI

on:
  push:
    branches: [main, develop]
    paths-ignore: ['**/*.md', 'LICENSE', '.gitignore']
  pull_request:
    branches: [main, develop]
    paths-ignore: ['**/*.md', 'LICENSE', '.gitignore']
  workflow_call:
    inputs:
      test_environment:
        description: 'Test environment to run (development, ci, production)'
        required: false
        default: 'ci'
        type: string
      enable_qemu_tests:
        description: 'Enable QEMU integration tests'
        required: false
        default: false
        type: boolean
      release_validation:
        description: 'Enable release validation tests'
        required: false
        default: false
        type: boolean
  workflow_dispatch:
    inputs:
      test_environment:
        description: 'Test environment to run'
        required: false
        default: 'ci'
        type: choice
        options:
          - 'development'
          - 'ci'
          - 'production'
      enable_qemu_tests:
        description: 'Enable QEMU integration tests'
        required: false
        default: false
        type: boolean
      release_validation:
        description: 'Enable release validation tests'
        required: false
        default: false
        type: boolean

env:
  TEST_ENVIRONMENT: ${{ inputs.test_environment || 'ci' }}
  ENABLE_QEMU_TESTS: ${{ inputs.enable_qemu_tests || 'false' }}
  SKIP_OPTIONAL_TESTS: ${{ vars.SKIP_OPTIONAL_TESTS || 'false' }}

jobs:
  code-quality:
    name: Code Quality
    runs-on: macos-latest
    steps:
      - name: üì• Checkout Repository
        uses: actions/checkout@v4

      - name: üîç SwiftLint Validation
        uses: ./.github/actions/swiftlint-validation
        with:
          strict-mode: true

  build-validation:
    name: Build Validation
    runs-on: macos-latest
    needs: code-quality
    steps:
      - name: üì• Checkout Repository
        uses: actions/checkout@v4

      - name: üõ†Ô∏è Setup Swift Environment
        uses: ./.github/actions/setup-swift-environment

      - name: üî® Build Project
        run: |
          echo "Building main targets..."
          swift build --verbose
          
          echo "Building System Extension target..."
          swift build --product USBIPDSystemExtension --verbose
          
          echo "Building test server..."
          swift build --product QEMUTestServer --verbose

  test-suite:
    name: Test Suite
    runs-on: macos-latest
    needs: build-validation
    steps:
      - name: üì• Checkout Repository
        uses: actions/checkout@v4

      - name: üõ†Ô∏è Setup Swift Environment
        uses: ./.github/actions/setup-swift-environment

      - name: üß™ Run Test Suite
        uses: ./.github/actions/run-test-suite
        with:
          test-environment: ${{ env.TEST_ENVIRONMENT }}
          enable-qemu-tests: ${{ env.ENABLE_QEMU_TESTS }}

  homebrew-validation:
    name: Homebrew Formula Validation
    runs-on: macos-latest
    needs: build-validation
    if: contains(github.event.head_commit.message, 'formula') || contains(github.event.head_commit.message, 'homebrew') || github.event_name == 'workflow_dispatch'
    steps:
      - name: üì• Checkout Repository
        uses: actions/checkout@v4

      - name: üõ†Ô∏è Setup Swift Environment
        uses: ./.github/actions/setup-swift-environment

      - name: üç∫ Test Homebrew Formula
        run: |
          echo "Testing Homebrew formula structure and syntax..."
          
          # Check Ruby syntax
          if ruby -c Formula/usbipd-mac.rb; then
            echo "‚úÖ Formula Ruby syntax is valid"
          else
            echo "‚ùå Formula has Ruby syntax errors"
            exit 1
          fi
          
          # Check for required formula elements
          if ! grep -q "class.*Formula" Formula/usbipd-mac.rb; then
            echo "‚ùå Formula must define a class inheriting from Formula"
            exit 1
          fi
          
          if ! grep -q "def install" Formula/usbipd-mac.rb; then
            echo "‚ùå Formula must define an install method"
            exit 1
          fi
          
          if ! grep -q "service do" Formula/usbipd-mac.rb; then
            echo "‚ö†Ô∏è Formula does not define a service block"
          else
            echo "‚úÖ Formula includes service configuration"
          fi
          
          # Create a test version of the formula with real values
          echo "Creating test formula with real values..."
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.1")
          TEST_SHA256="a" # Dummy SHA for testing
          
          # Create test formula
          sed -e "s/VERSION_PLACEHOLDER/$LATEST_TAG/g" \
              -e "s/SHA256_PLACEHOLDER/$TEST_SHA256/g" \
              Formula/usbipd-mac.rb > /tmp/test-formula.rb
          
          # Test the modified formula syntax
          if ruby -c /tmp/test-formula.rb; then
            echo "‚úÖ Test formula with substituted values is valid"
          else
            echo "‚ùå Test formula has issues after substitution"
            exit 1
          fi
          
          echo "‚úÖ Homebrew formula validation completed successfully"

  ci-summary:
    name: CI Summary
    runs-on: ubuntu-latest
    if: always()
    needs: [code-quality, build-validation, test-suite, homebrew-validation]
    steps:
      - name: üìä Check Overall CI Status
        run: |
          echo "CI Summary:"
          echo "Code Quality: ${{ needs.code-quality.result }}"
          echo "Build Validation: ${{ needs.build-validation.result }}"
          echo "Test Suite: ${{ needs.test-suite.result }}"
          echo "Homebrew Validation: ${{ needs.homebrew-validation.result }}"
          
          if [[ "${{ needs.code-quality.result }}" == "success" && 
                "${{ needs.build-validation.result }}" == "success" && 
                ("${{ needs.test-suite.result }}" == "success" || "${{ needs.test-suite.result }}" == "skipped") ]]; then
            echo "‚úÖ CI passed successfully"
          else
            echo "‚ùå CI failed"
            exit 1
          fi

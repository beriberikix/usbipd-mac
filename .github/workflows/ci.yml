name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  lint:
    name: Code Quality (SwiftLint)
    runs-on: macos-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Cache SwiftLint
        uses: actions/cache@v3
        with:
          path: |
            /usr/local/bin/swiftlint
            /opt/homebrew/bin/swiftlint
          key: ${{ runner.os }}-swiftlint-${{ hashFiles('.swiftlint.yml') }}
          restore-keys: |
            ${{ runner.os }}-swiftlint-
      
      - name: Install SwiftLint
        run: |
          # Check if SwiftLint is already installed
          if ! command -v swiftlint &> /dev/null; then
            echo "SwiftLint not found, installing via Homebrew..."
            brew install swiftlint
          else
            echo "SwiftLint is already installed"
            swiftlint version
          fi
      
      - name: Run SwiftLint
        run: |
          echo "Running SwiftLint with strict mode..."
          # Use --strict to fail on warnings, --reporter xcode for detailed output
          swiftlint lint --strict --reporter xcode
        continue-on-error: false
      
      - name: SwiftLint Summary
        if: always()
        run: |
          echo "SwiftLint execution completed"
          if [ $? -eq 0 ]; then
            echo "✅ No SwiftLint violations found"
          else
            echo "❌ SwiftLint violations detected - check output above for details"
          fi

  build:
    name: Build Validation
    runs-on: macos-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Swift
        uses: swift-actions/setup-swift@v1
        with:
          swift-version: 'latest'
      
      - name: Verify Swift installation
        run: |
          echo "Swift version: $(swift --version | head -n1)"
          echo "macOS runner: $(sw_vers -productName) $(sw_vers -productVersion)"
      
      - name: Cache Swift packages
        uses: actions/cache@v3
        with:
          path: |
            .build
            ~/Library/Caches/org.swift.swiftpm
            ~/Library/org.swift.swiftpm
          key: ${{ runner.os }}-swift-${{ hashFiles('Package.swift', 'Package.resolved') }}
          restore-keys: |
            ${{ runner.os }}-swift-
      
      - name: Resolve dependencies
        run: |
          echo "Resolving Swift package dependencies..."
          swift package resolve
          echo "✅ Dependencies resolved successfully"
      
      - name: Build project
        run: |
          echo "Building project with Swift Package Manager..."
          # Build with verbose output to capture detailed error information
          swift build --verbose
          echo "✅ Build completed successfully"
        continue-on-error: false
      
      - name: Build validation summary
        if: always()
        run: |
          echo "Build validation completed"
          if [ $? -eq 0 ]; then
            echo "✅ Project built successfully"
            echo "All Swift modules compiled without errors"
          else
            echo "❌ Build failed - check output above for detailed error information"
            echo "Common build issues to check:"
            echo "- Missing dependencies"
            echo "- Swift syntax errors"
            echo "- Import resolution failures"
            echo "- Platform compatibility issues"
          fi

  test:
    name: Unit Tests
    runs-on: macos-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Swift
        uses: swift-actions/setup-swift@v1
        with:
          swift-version: 'latest'
      
      - name: Verify Swift installation
        run: |
          echo "Swift version: $(swift --version | head -n1)"
          echo "macOS runner: $(sw_vers -productName) $(sw_vers -productVersion)"
      
      - name: Cache Swift packages
        uses: actions/cache@v3
        with:
          path: |
            .build
            ~/Library/Caches/org.swift.swiftpm
            ~/Library/org.swift.swiftpm
          key: ${{ runner.os }}-swift-${{ hashFiles('Package.swift', 'Package.resolved') }}
          restore-keys: |
            ${{ runner.os }}-swift-
      
      - name: Resolve dependencies
        run: |
          echo "Resolving Swift package dependencies for testing..."
          swift package resolve
          echo "✅ Dependencies resolved successfully"
      
      - name: Run unit tests
        run: |
          echo "Running unit tests with Swift Package Manager..."
          # Run tests with verbose output and proper error reporting
          swift test --verbose --parallel
          echo "✅ Unit tests completed successfully"
        continue-on-error: false
      
      - name: Test execution summary
        if: always()
        run: |
          echo "Unit test execution completed"
          if [ $? -eq 0 ]; then
            echo "✅ All unit tests passed"
            echo "Test suites executed:"
            echo "- USBIPDCoreTests"
            echo "- USBIPDCLITests"
          else
            echo "❌ Unit tests failed - check output above for detailed failure information"
            echo "Common test failure causes:"
            echo "- Assertion failures in test cases"
            echo "- Runtime errors during test execution"
            echo "- Missing test dependencies or setup"
            echo "- Platform-specific test issues"
          fi

  integration-test:
    name: Integration Tests (QEMU)
    runs-on: macos-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Swift
        uses: swift-actions/setup-swift@v1
        with:
          swift-version: 'latest'
      
      - name: Verify Swift installation
        run: |
          echo "Swift version: $(swift --version | head -n1)"
          echo "macOS runner: $(sw_vers -productName) $(sw_vers -productVersion)"
      
      - name: Cache Swift packages
        uses: actions/cache@v3
        with:
          path: |
            .build
            ~/Library/Caches/org.swift.swiftpm
            ~/Library/org.swift.swiftpm
          key: ${{ runner.os }}-swift-${{ hashFiles('Package.swift', 'Package.resolved') }}
          restore-keys: |
            ${{ runner.os }}-swift-
      
      - name: Setup test dependencies
        run: |
          echo "Setting up integration test dependencies..."
          # Ensure Scripts directory is executable
          chmod +x Scripts/run-qemu-tests.sh
          echo "✅ Test dependencies configured"
      
      - name: Resolve dependencies
        run: |
          echo "Resolving Swift package dependencies for integration testing..."
          swift package resolve
          echo "✅ Dependencies resolved successfully"
      
      - name: Build QEMU test server
        run: |
          echo "Building QEMU test server..."
          swift build --product QEMUTestServer
          echo "✅ QEMU test server built successfully"
      
      - name: Run QEMU test script validation
        run: |
          echo "Running QEMU test server validation script..."
          ./Scripts/run-qemu-tests.sh
          echo "✅ QEMU test script validation completed"
        continue-on-error: false
      
      - name: Run integration tests
        run: |
          echo "Running integration tests with QEMU test server..."
          # Run only the integration tests
          swift test --filter IntegrationTests --verbose
          echo "✅ Integration tests completed successfully"
        continue-on-error: false
      
      - name: Integration test summary
        if: always()
        run: |
          echo "Integration test execution completed"
          if [ $? -eq 0 ]; then
            echo "✅ All integration tests passed"
            echo "Integration test components validated:"
            echo "- QEMU test server functionality"
            echo "- End-to-end protocol flow"
            echo "- Network communication layer"
          else
            echo "❌ Integration tests failed - check output above for detailed failure information"
            echo "Common integration test failure causes:"
            echo "- QEMU test server setup issues"
            echo "- Network connectivity problems"
            echo "- Protocol compatibility issues"
            echo "- Test environment configuration problems"
          fi
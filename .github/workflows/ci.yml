name: CI

on:
  push:
    branches: [main, develop]
    paths-ignore: ['**/*.md', 'LICENSE', '.gitignore']
  pull_request:
    branches: [main, develop]
    paths-ignore: ['**/*.md', 'LICENSE', '.gitignore']
  workflow_call:
    inputs:
      test_environment:
        description: 'Test environment to run (development, ci, production)'
        required: false
        default: 'ci'
        type: string
      enable_qemu_tests:
        description: 'Enable QEMU integration tests'
        required: false
        default: false
        type: boolean
      release_validation:
        description: 'Enable release validation tests'
        required: false
        default: false
        type: boolean
  workflow_dispatch:
    inputs:
      test_environment:
        description: 'Test environment to run'
        required: false
        default: 'ci'
        type: choice
        options:
          - 'development'
          - 'ci'
          - 'production'
      enable_qemu_tests:
        description: 'Enable QEMU integration tests'
        required: false
        default: false
        type: boolean
      release_validation:
        description: 'Enable release validation tests'
        required: false
        default: false
        type: boolean

env:
  TEST_ENVIRONMENT: ${{ inputs.test_environment || 'ci' }}
  ENABLE_QEMU_TESTS: ${{ inputs.enable_qemu_tests || 'false' }}
  SKIP_OPTIONAL_TESTS: ${{ vars.SKIP_OPTIONAL_TESTS || 'false' }}

jobs:
  code-quality:
    name: Code Quality
    runs-on: macos-latest
    steps:
      - name: üì• Checkout Repository
        uses: actions/checkout@v4

      - name: üîç SwiftLint Validation
        uses: ./.github/actions/swiftlint-validation
        with:
          strict-mode: true

  build-validation:
    name: Build Validation
    runs-on: macos-latest
    needs: code-quality
    steps:
      - name: üì• Checkout Repository
        uses: actions/checkout@v4

      - name: üõ†Ô∏è Setup Swift Environment
        uses: ./.github/actions/setup-swift-environment

      - name: üî® Build Project
        run: |
          echo "Building main targets..."
          swift build --verbose
          
          echo "Building System Extension target..."
          swift build --product USBIPDSystemExtension --verbose
          
          echo "Building test server..."
          swift build --product QEMUTestServer --verbose

  test-suite:
    name: Test Suite
    runs-on: macos-latest
    needs: build-validation
    steps:
      - name: üì• Checkout Repository
        uses: actions/checkout@v4

      - name: üõ†Ô∏è Setup Swift Environment
        uses: ./.github/actions/setup-swift-environment

      - name: üß™ Run Test Suite
        uses: ./.github/actions/run-test-suite
        with:
          test-environment: ${{ env.TEST_ENVIRONMENT }}
          enable-qemu-tests: ${{ env.ENABLE_QEMU_TESTS }}

  homebrew-metadata-validation:
    name: Homebrew Metadata Validation
    runs-on: macos-latest
    needs: build-validation
    if: contains(github.event.head_commit.message, 'homebrew') || contains(github.event.head_commit.message, 'metadata') || github.event_name == 'workflow_dispatch'
    steps:
      - name: üì• Checkout Repository
        uses: actions/checkout@v4

      - name: üõ†Ô∏è Setup Swift Environment
        uses: ./.github/actions/setup-swift-environment

      - name: üîß Setup Metadata Generation Environment
        run: |
          echo "Setting up metadata generation environment..."
          
          # Install jq if not available
          if ! command -v jq >/dev/null 2>&1; then
            echo "üì¶ Installing jq for JSON processing..."
            brew install jq
          fi
          
          echo "‚úÖ Environment ready for metadata generation testing"

      - name: üè∫ Test Metadata Generation Script
        run: |
          echo "Testing homebrew metadata generation script..."
          
          # Check script exists and is executable
          if [ ! -f "Scripts/generate-homebrew-metadata.sh" ]; then
            echo "‚ùå Metadata generation script not found"
            exit 1
          fi
          
          if [ ! -x "Scripts/generate-homebrew-metadata.sh" ]; then
            echo "‚ùå Metadata generation script is not executable"
            exit 1
          fi
          
          echo "‚úÖ Metadata generation script found and executable"
          
          # Test script help output
          if ./Scripts/generate-homebrew-metadata.sh --help > /dev/null; then
            echo "‚úÖ Script help option works"
          else
            echo "‚ùå Script help option failed"
            exit 1
          fi
          
          # Test dry run mode with dummy data
          echo "Testing metadata generation in dry-run mode..."
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.1")
          
          if ./Scripts/generate-homebrew-metadata.sh \
              --version "$LATEST_TAG" \
              --checksum "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855" \
              --archive-url "https://github.com/beriberikix/usbipd-mac/archive/$LATEST_TAG.tar.gz" \
              --release-notes "Test release notes for CI validation" \
              --dry-run \
              --skip-validation; then
            echo "‚úÖ Metadata generation dry-run succeeded"
          else
            echo "‚ùå Metadata generation dry-run failed"
            exit 1
          fi

      - name: üîç Test Metadata Validation Script
        run: |
          echo "Testing homebrew metadata validation script..."
          
          # Check script exists and is executable
          if [ ! -f "Scripts/validate-homebrew-metadata.sh" ]; then
            echo "‚ùå Metadata validation script not found"
            exit 1
          fi
          
          if [ ! -x "Scripts/validate-homebrew-metadata.sh" ]; then
            echo "‚ùå Metadata validation script is not executable"
            exit 1
          fi
          
          echo "‚úÖ Metadata validation script found and executable"
          
          # Test script help output
          if ./Scripts/validate-homebrew-metadata.sh --help > /dev/null; then
            echo "‚úÖ Validation script help option works"
          else
            echo "‚ùå Validation script help option failed"
            exit 1
          fi

      - name: üß™ Test Complete Metadata Workflow
        run: |
          echo "Testing complete metadata generation and validation workflow..."
          
          # Generate test metadata
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.1")
          TEST_CHECKSUM="e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855"
          TEST_URL="https://github.com/beriberikix/usbipd-mac/archive/$LATEST_TAG.tar.gz"
          
          echo "Generating test metadata..."
          ./Scripts/generate-homebrew-metadata.sh \
            --version "$LATEST_TAG" \
            --checksum "$TEST_CHECKSUM" \
            --archive-url "$TEST_URL" \
            --release-notes "Test release for CI validation" \
            --skip-validation \
            --force
          
          # Check if metadata was generated
          METADATA_FILE=".build/homebrew-metadata/homebrew-metadata.json"
          if [ ! -f "$METADATA_FILE" ]; then
            echo "‚ùå Metadata file was not generated"
            exit 1
          fi
          
          echo "‚úÖ Metadata file generated successfully"
          
          # Validate the generated metadata
          echo "Validating generated metadata..."
          if ./Scripts/validate-homebrew-metadata.sh \
              --file "$METADATA_FILE" \
              --skip-network \
              --skip-checksum \
              --verbose; then
            echo "‚úÖ Generated metadata validation passed"
          else
            echo "‚ùå Generated metadata validation failed"
            exit 1
          fi
          
          # Verify metadata content
          echo "Verifying metadata content structure..."
          
          # Check required fields exist
          if ! jq -e '.schema_version' "$METADATA_FILE" > /dev/null; then
            echo "‚ùå Missing schema_version field"
            exit 1
          fi
          
          if ! jq -e '.metadata.version' "$METADATA_FILE" > /dev/null; then
            echo "‚ùå Missing metadata.version field"
            exit 1
          fi
          
          if ! jq -e '.metadata.sha256' "$METADATA_FILE" > /dev/null; then
            echo "‚ùå Missing metadata.sha256 field"
            exit 1
          fi
          
          if ! jq -e '.formula_updates' "$METADATA_FILE" > /dev/null; then
            echo "‚ùå Missing formula_updates field"
            exit 1
          fi
          
          echo "‚úÖ All required fields found in metadata"
          
          # Verify content values
          METADATA_VERSION=$(jq -r '.metadata.version' "$METADATA_FILE")
          if [ "$METADATA_VERSION" != "$LATEST_TAG" ]; then
            echo "‚ùå Version mismatch in metadata: expected $LATEST_TAG, got $METADATA_VERSION"
            exit 1
          fi
          
          METADATA_CHECKSUM=$(jq -r '.metadata.sha256' "$METADATA_FILE")
          if [ "$METADATA_CHECKSUM" != "$TEST_CHECKSUM" ]; then
            echo "‚ùå Checksum mismatch in metadata: expected $TEST_CHECKSUM, got $METADATA_CHECKSUM"
            exit 1
          fi
          
          echo "‚úÖ Metadata content verification passed"
          
          # Display metadata summary
          echo "üìã Generated Metadata Summary:"
          echo "   ‚Ä¢ Schema Version: $(jq -r '.schema_version' "$METADATA_FILE")"
          echo "   ‚Ä¢ Version: $(jq -r '.metadata.version' "$METADATA_FILE")"
          echo "   ‚Ä¢ Archive URL: $(jq -r '.metadata.archive_url' "$METADATA_FILE")"
          echo "   ‚Ä¢ SHA256: $(jq -r '.metadata.sha256' "$METADATA_FILE" | head -c 16)..."
          echo "   ‚Ä¢ Timestamp: $(jq -r '.metadata.timestamp' "$METADATA_FILE")"
          echo "   ‚Ä¢ File Size: $(wc -c < "$METADATA_FILE") bytes"
          
          echo "‚úÖ Complete metadata workflow test passed"

      - name: üßπ Cleanup Test Artifacts
        if: always()
        run: |
          echo "Cleaning up test artifacts..."
          rm -rf .build/homebrew-metadata/ || true
          echo "‚úÖ Cleanup completed"

  ci-summary:
    name: CI Summary
    runs-on: ubuntu-latest
    if: always()
    needs: [code-quality, build-validation, test-suite, homebrew-metadata-validation]
    steps:
      - name: üìä Check Overall CI Status
        run: |
          echo "CI Summary:"
          echo "Code Quality: ${{ needs.code-quality.result }}"
          echo "Build Validation: ${{ needs.build-validation.result }}"
          echo "Test Suite: ${{ needs.test-suite.result }}"
          echo "Homebrew Metadata Validation: ${{ needs.homebrew-metadata-validation.result }}"
          
          if [[ "${{ needs.code-quality.result }}" == "success" && 
                "${{ needs.build-validation.result }}" == "success" && 
                ("${{ needs.test-suite.result }}" == "success" || "${{ needs.test-suite.result }}" == "skipped") ]]; then
            echo "‚úÖ CI passed successfully"
          else
            echo "‚ùå CI failed"
            exit 1
          fi

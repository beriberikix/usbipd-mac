name: Production Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.2.3)'
        required: true
        type: string
      prerelease:
        description: 'Mark as pre-release'
        required: false
        default: false
        type: boolean
      skip_tests:
        description: 'Skip test validation (emergency use only)'
        required: false
        default: false
        type: boolean

env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  DEVELOPER_ID_CERTIFICATE: ${{ secrets.DEVELOPER_ID_CERTIFICATE }}
  DEVELOPER_ID_CERTIFICATE_PASSWORD: ${{ secrets.DEVELOPER_ID_CERTIFICATE_PASSWORD }}
  NOTARIZATION_USERNAME: ${{ secrets.NOTARIZATION_USERNAME }}
  NOTARIZATION_PASSWORD: ${{ secrets.NOTARIZATION_PASSWORD }}

jobs:
  validate-release:
    name: Release Validation
    runs-on: macos-latest
    outputs:
      version: ${{ steps.extract-version.outputs.version }}
      is-prerelease: ${{ steps.extract-version.outputs.prerelease }}
    steps:
      - name: üè∑Ô∏è Starting Release Validation
        run: |
          echo "::notice title=Release Validation::Starting release validation and version extraction"
          echo "üè∑Ô∏è This stage validates release triggers and extracts version information"
          echo "üìä Status: STARTING"

      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: üîç Extract Version Information
        id: extract-version
        run: |
          echo "::group::Version Extraction"
          echo "::notice title=Version Processing::Extracting and validating version information"
          
          if [ "${{ github.event_name }}" = "push" ]; then
            VERSION=${{ github.ref_name }}
            echo "üìå Tag-triggered release: $VERSION"
            PRERELEASE=$(echo "$VERSION" | grep -E '-(alpha|beta|rc)' >/dev/null && echo "true" || echo "false")
          else
            VERSION="${{ github.event.inputs.version }}"
            PRERELEASE="${{ github.event.inputs.prerelease }}"
            echo "üîß Manual release dispatch: $VERSION"
          fi
          
          # Validate semantic versioning
          if [[ ! "$VERSION" =~ ^v[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9.-]+)?$ ]]; then
            echo "::error title=Invalid Version::Version must follow semantic versioning (vX.Y.Z or vX.Y.Z-suffix)"
            exit 1
          fi
          
          echo "‚úÖ Version validated: $VERSION"
          echo "üè∑Ô∏è Pre-release: $PRERELEASE"
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "prerelease=$PRERELEASE" >> $GITHUB_OUTPUT
          echo "::endgroup::"

      - name: üìä Release Validation Summary
        run: |
          echo "::group::Release Validation Summary"
          echo "::notice title=Release Validated::Release version and trigger validated successfully"
          echo "‚úÖ Release trigger: ${{ github.event_name }}"
          echo "‚úÖ Version: ${{ steps.extract-version.outputs.version }}"
          echo "‚úÖ Pre-release: ${{ steps.extract-version.outputs.prerelease }}"
          echo "üìä Status: VALIDATED"
          echo "::endgroup::"

  lint-and-build:
    name: Code Quality and Build
    runs-on: macos-latest
    needs: validate-release
    steps:
      - name: üîß Starting Code Quality and Build Validation
        run: |
          echo "::notice title=Quality Check::Starting code quality validation and build verification for release"
          echo "üîß This stage ensures code quality and successful compilation before release"
          echo "üìä Status: STARTING"

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Cache SwiftLint
        uses: actions/cache@v3
        with:
          path: |
            /usr/local/bin/swiftlint
            /opt/homebrew/bin/swiftlint
          key: ${{ runner.os }}-swiftlint-${{ hashFiles('.swiftlint.yml') }}
          restore-keys: |
            ${{ runner.os }}-swiftlint-

      - name: üîß Install SwiftLint
        run: |
          echo "::group::SwiftLint Installation"
          if ! command -v swiftlint &> /dev/null; then
            echo "::notice title=SwiftLint Installation::Installing SwiftLint for code quality validation"
            brew install swiftlint
            echo "‚úÖ SwiftLint installation completed"
          else
            echo "::notice title=SwiftLint Found::Using cached SwiftLint installation"
            echo "‚úÖ SwiftLint version: $(swiftlint version)"
          fi
          echo "::endgroup::"

      - name: üîç Run SwiftLint Analysis
        run: |
          echo "::group::SwiftLint Release Validation"
          echo "::notice title=Code Quality::Running strict SwiftLint validation for release"
          echo "üîç Validating code quality for release readiness..."
          if swiftlint lint --strict --reporter xcode; then
            echo "::notice title=Code Quality Success::Code meets release quality standards"
            echo "‚úÖ Code quality validation PASSED"
          else
            echo "::error title=Code Quality Failed::Code quality issues prevent release"
            echo "‚ùå Release blocked by code quality violations"
            exit 1
          fi
          echo "::endgroup::"

      - name: Cache Swift packages
        uses: actions/cache@v3
        with:
          path: |
            .build
            ~/Library/Caches/org.swift.swiftpm
            ~/Library/org.swift.swiftpm
          key: ${{ runner.os }}-swift-${{ hashFiles('Package.swift', 'Package.resolved') }}
          restore-keys: |
            ${{ runner.os }}-swift-

      - name: üî® Build for Release
        run: |
          echo "::group::Release Build"
          echo "::notice title=Release Build::Building project for release with optimizations"
          echo "üî® Building optimized release binaries..."
          
          # Build in release mode with optimization
          if swift build --configuration release --verbose; then
            echo "::notice title=Build Success::Release build completed successfully"
            echo "‚úÖ Release build PASSED"
            echo "üì¶ Release artifacts ready"
          else
            echo "::error title=Build Failed::Release build failed"
            echo "‚ùå Release blocked by build failures"
            exit 1
          fi
          echo "::endgroup::"

  test-validation:
    name: Test Validation
    runs-on: macos-latest
    needs: [validate-release, lint-and-build]
    if: ${{ !inputs.skip_tests }}
    steps:
      - name: üß™ Starting Release Test Validation
        run: |
          echo "::notice title=Test Validation::Starting comprehensive test validation for release"
          echo "üß™ This stage runs full test validation to ensure release quality"
          echo "üìä Status: STARTING"

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Cache Swift packages
        uses: actions/cache@v3
        with:
          path: |
            .build
            ~/Library/Caches/org.swift.swiftpm
            ~/Library/org.swift.swiftpm
          key: ${{ runner.os }}-swift-${{ hashFiles('Package.swift', 'Package.resolved') }}
          restore-keys: |
            ${{ runner.os }}-swift-

      - name: üîß Setup Test Environment
        run: |
          echo "::group::Test Environment Setup"
          echo "::notice title=Test Setup::Setting up comprehensive test environment for release"
          
          # Make scripts executable
          chmod +x Scripts/run-ci-tests.sh
          chmod +x Scripts/run-production-tests.sh
          chmod +x Scripts/test-environment-setup.sh
          
          # Validate test environment
          if ./Scripts/test-environment-setup.sh validate; then
            echo "::notice title=Environment Ready::Test environment validated for release testing"
            echo "‚úÖ Test environment ready"
          else
            echo "::error title=Environment Failed::Test environment validation failed"
            echo "‚ùå Release blocked by test environment issues"
            exit 1
          fi
          echo "::endgroup::"

      - name: üß™ Execute CI Tests
        run: |
          echo "::group::CI Test Execution"
          echo "::notice title=CI Tests::Running CI test suite for release validation"
          echo "üß™ Running CI tests for release validation..."
          
          if ./Scripts/run-ci-tests.sh; then
            echo "::notice title=CI Tests Success::All CI tests passed for release"
            echo "‚úÖ CI tests PASSED"
          else
            echo "::error title=CI Tests Failed::CI test failures block release"
            echo "‚ùå Release blocked by CI test failures"
            exit 1
          fi
          echo "::endgroup::"

      - name: üîó Execute Production Tests
        run: |
          echo "::group::Production Test Execution"
          echo "::notice title=Production Tests::Running production test validation for release"
          echo "üîó Running production tests for release validation..."
          
          # Run production tests with CI constraints for release validation
          if ./Scripts/run-production-tests.sh --no-qemu --no-system-extension --no-hardware --timeout 300; then
            echo "::notice title=Production Tests Success::Production tests validated for release"
            echo "‚úÖ Production tests PASSED"
          else
            echo "::error title=Production Tests Failed::Production test failures block release"
            echo "‚ùå Release blocked by production test failures"
            exit 1
          fi
          echo "::endgroup::"

  build-artifacts:
    name: Build Release Artifacts
    runs-on: macos-latest
    needs: [validate-release, lint-and-build, test-validation]
    if: always() && needs.validate-release.result == 'success' && needs.lint-and-build.result == 'success' && (needs.test-validation.result == 'success' || needs.test-validation.result == 'skipped')
    outputs:
      artifact-paths: ${{ steps.build-artifacts.outputs.paths }}
      checksums: ${{ steps.generate-checksums.outputs.checksums }}
    steps:
      - name: üì¶ Starting Artifact Building
        run: |
          echo "::notice title=Artifact Building::Starting release artifact building and packaging"
          echo "üì¶ This stage builds and packages release artifacts with code signing"
          echo "üìä Status: STARTING"

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Cache Swift packages
        uses: actions/cache@v3
        with:
          path: |
            .build
            ~/Library/Caches/org.swift.swiftpm
            ~/Library/org.swift.swiftpm
          key: ${{ runner.os }}-swift-${{ hashFiles('Package.swift', 'Package.resolved') }}
          restore-keys: |
            ${{ runner.os }}-swift-

      - name: üîí Setup Code Signing
        if: env.DEVELOPER_ID_CERTIFICATE != ''
        run: |
          echo "::group::Code Signing Setup"
          echo "::notice title=Code Signing::Setting up Apple Developer certificates for release signing"
          
          # Import Developer ID certificate
          echo "$DEVELOPER_ID_CERTIFICATE" | base64 --decode > certificate.p12
          security create-keychain -p "" build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p "" build.keychain
          security import certificate.p12 -k build.keychain -P "$DEVELOPER_ID_CERTIFICATE_PASSWORD" -T /usr/bin/codesign
          security set-key-partition-list -S apple-tool:,apple: -s -k "" build.keychain
          rm certificate.p12
          
          echo "::notice title=Signing Ready::Code signing environment configured"
          echo "‚úÖ Code signing ready"
          echo "::endgroup::"

      - name: üèóÔ∏è Build Release Artifacts
        id: build-artifacts
        run: |
          echo "::group::Release Artifact Building"
          echo "::notice title=Artifact Building::Building optimized release artifacts"
          
          VERSION="${{ needs.validate-release.outputs.version }}"
          ARTIFACTS_DIR="release-artifacts"
          mkdir -p "$ARTIFACTS_DIR"
          
          echo "üèóÔ∏è Building release artifacts for $VERSION..."
          
          # Build optimized release binaries
          swift build --configuration release --arch arm64 --arch x86_64
          
          # Package main executable
          USBIPD_PATH="$ARTIFACTS_DIR/usbipd-$VERSION-macos"
          cp .build/release/usbipd "$USBIPD_PATH"
          
          # Package QEMU test server if available
          if [ -f .build/release/QEMUTestServer ]; then
            QEMU_SERVER_PATH="$ARTIFACTS_DIR/QEMUTestServer-$VERSION-macos"
            cp .build/release/QEMUTestServer "$QEMU_SERVER_PATH"
          fi
          
          # Code sign binaries if certificates available
          if [ -n "$DEVELOPER_ID_CERTIFICATE" ]; then
            echo "üîí Code signing release artifacts..."
            codesign --sign "Developer ID Application" --timestamp "$USBIPD_PATH" || echo "::warning::Code signing failed for usbipd"
            if [ -f "$QEMU_SERVER_PATH" ]; then
              codesign --sign "Developer ID Application" --timestamp "$QEMU_SERVER_PATH" || echo "::warning::Code signing failed for QEMUTestServer"
            fi
            echo "‚úÖ Code signing completed"
          else
            echo "::warning::No code signing certificates available - binaries will be unsigned"
          fi
          
          # Create archive
          ARCHIVE_PATH="$ARTIFACTS_DIR/usbipd-mac-$VERSION.tar.gz"
          tar -czf "$ARCHIVE_PATH" -C "$ARTIFACTS_DIR" $(ls "$ARTIFACTS_DIR" | grep -v ".tar.gz")
          
          # Output artifact paths
          PATHS="$USBIPD_PATH"
          if [ -f "$QEMU_SERVER_PATH" ]; then
            PATHS="$PATHS,$QEMU_SERVER_PATH"
          fi
          PATHS="$PATHS,$ARCHIVE_PATH"
          
          echo "paths=$PATHS" >> $GITHUB_OUTPUT
          echo "::notice title=Artifacts Built::Release artifacts built successfully"
          echo "‚úÖ Artifacts: $PATHS"
          echo "::endgroup::"

      - name: üìä Generate Checksums
        id: generate-checksums
        run: |
          echo "::group::Checksum Generation"
          echo "::notice title=Checksums::Generating SHA256 checksums for release artifacts"
          
          cd release-artifacts
          CHECKSUMS_FILE="checksums-${{ needs.validate-release.outputs.version }}.sha256"
          
          echo "üìä Generating checksums..."
          shasum -a 256 * > "$CHECKSUMS_FILE"
          
          echo "::notice title=Checksums Generated::SHA256 checksums created for all artifacts"
          echo "‚úÖ Checksums saved to $CHECKSUMS_FILE"
          
          echo "checksums=$CHECKSUMS_FILE" >> $GITHUB_OUTPUT
          echo "::endgroup::"

      - name: üì§ Upload Release Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: release-artifacts-${{ needs.validate-release.outputs.version }}
          path: release-artifacts/
          retention-days: 30

  create-release:
    name: Create GitHub Release
    runs-on: macos-latest
    needs: [validate-release, build-artifacts]
    steps:
      - name: üöÄ Starting Release Creation
        run: |
          echo "::notice title=Release Creation::Creating GitHub release with artifacts"
          echo "üöÄ This stage creates the GitHub release and uploads artifacts"
          echo "üìä Status: STARTING"

      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: üì§ Download Release Artifacts
        uses: actions/download-artifact@v4
        with:
          name: release-artifacts-${{ needs.validate-release.outputs.version }}
          path: release-artifacts/

      - name: üìù Generate Release Notes
        id: release-notes
        run: |
          echo "::group::Release Notes Generation"
          echo "::notice title=Release Notes::Generating release notes from commit history"
          
          VERSION="${{ needs.validate-release.outputs.version }}"
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
          
          echo "üìù Generating release notes for $VERSION..."
          
          if [ -n "$PREVIOUS_TAG" ]; then
            echo "üìã Changes since $PREVIOUS_TAG:"
            CHANGELOG=$(git log --pretty=format:"- %s" $PREVIOUS_TAG..HEAD | head -20)
          else
            echo "üìã Initial release changes:"
            CHANGELOG=$(git log --pretty=format:"- %s" HEAD | head -20)
          fi
          
          # Create release notes
          cat > release-notes.md << EOF
          # Release $VERSION
          
          ## What's Changed
          
          $CHANGELOG
          
          ## Artifacts
          
          This release includes the following artifacts:
          - **usbipd**: Main USB/IP daemon executable for macOS
          - **QEMUTestServer**: QEMU integration test server (if available)
          - **Archive**: Complete packaged release (tar.gz)
          - **Checksums**: SHA256 verification checksums
          
          ## Installation
          
          Download the appropriate binary for your system and verify with the provided checksums.
          
          ## Requirements
          
          - macOS 11.0 or later
          - Administrator privileges for USB device access
          
          **Note**: Binaries are code-signed with Apple Developer ID when available.
          EOF
          
          echo "::notice title=Release Notes Ready::Release notes generated successfully"
          echo "‚úÖ Release notes prepared"
          echo "::endgroup::"

      - name: üöÄ Create GitHub Release
        run: |
          echo "::group::GitHub Release Creation"
          echo "::notice title=GitHub Release::Creating GitHub release with artifacts"
          
          VERSION="${{ needs.validate-release.outputs.version }}"
          PRERELEASE="${{ needs.validate-release.outputs.is-prerelease }}"
          
          echo "üöÄ Creating GitHub release $VERSION..."
          
          # Create release
          RELEASE_ARGS="--title \"usbipd-mac $VERSION\" --notes-file release-notes.md"
          if [ "$PRERELEASE" = "true" ]; then
            RELEASE_ARGS="$RELEASE_ARGS --prerelease"
            echo "üè∑Ô∏è Creating pre-release"
          else
            echo "üè∑Ô∏è Creating stable release"
          fi
          
          gh release create "$VERSION" release-artifacts/* $RELEASE_ARGS
          
          echo "::notice title=Release Created::GitHub release created successfully"
          echo "‚úÖ Release $VERSION published"
          echo "üîó Release URL: ${{ github.server_url }}/${{ github.repository }}/releases/tag/$VERSION"
          echo "::endgroup::"

  post-release:
    name: Post-Release Actions
    runs-on: macos-latest
    needs: [validate-release, create-release]
    if: always() && needs.create-release.result == 'success'
    steps:
      - name: üìä Starting Post-Release Actions
        run: |
          echo "::notice title=Post-Release::Starting post-release validation and notification"
          echo "üìä This stage handles post-release validation and notifications"
          echo "üìä Status: STARTING"

      - name: Checkout code
        uses: actions/checkout@v4

      - name: ‚úÖ Validate Release
        run: |
          echo "::group::Release Validation"
          echo "::notice title=Release Validation::Validating published release"
          
          VERSION="${{ needs.validate-release.outputs.version }}"
          echo "‚úÖ Validating release $VERSION..."
          
          # Verify release exists and is accessible
          if gh release view "$VERSION" > /dev/null 2>&1; then
            echo "::notice title=Release Verified::Release is publicly accessible"
            echo "‚úÖ Release $VERSION verified"
            
            # Display release summary
            echo "üìä Release Summary:"
            echo "   ‚Ä¢ Version: $VERSION"
            echo "   ‚Ä¢ Pre-release: ${{ needs.validate-release.outputs.is-prerelease }}"
            echo "   ‚Ä¢ Artifacts: Available"
            echo "   ‚Ä¢ Status: Published"
          else
            echo "::error title=Release Verification Failed::Cannot verify release accessibility"
            echo "‚ùå Release verification failed"
            exit 1
          fi
          echo "::endgroup::"

      - name: üéâ Release Success Notification
        run: |
          echo "::group::Release Success"
          echo "::notice title=Release Complete::Production release completed successfully"
          echo "üéâ Release ${{ needs.validate-release.outputs.version }} has been successfully published!"
          echo ""
          echo "üì¶ **Release Details:**"
          echo "   ‚Ä¢ Version: ${{ needs.validate-release.outputs.version }}"
          echo "   ‚Ä¢ Pre-release: ${{ needs.validate-release.outputs.is-prerelease }}"
          echo "   ‚Ä¢ Release URL: ${{ github.server_url }}/${{ github.repository }}/releases/tag/${{ needs.validate-release.outputs.version }}"
          echo ""
          echo "‚úÖ **Completed Steps:**"
          echo "   ‚Ä¢ Version validation"
          echo "   ‚Ä¢ Code quality checks (SwiftLint)"
          echo "   ‚Ä¢ Release build compilation"
          echo "   ‚Ä¢ Test validation (CI and Production)"
          echo "   ‚Ä¢ Artifact building and signing"
          echo "   ‚Ä¢ GitHub release creation"
          echo "   ‚Ä¢ Post-release verification"
          echo ""
          echo "üìä Status: **SUCCESS**"
          echo "::endgroup::"